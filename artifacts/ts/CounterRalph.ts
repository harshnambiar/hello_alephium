/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as CounterRalphContractJson } from "../CounterRalph.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { Entries, AllStructs } from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace CounterRalphTypes {
  export type Fields = {
    counter: bigint;
    count: bigint;
  };

  export type State = ContractState<Fields>;

  export type ChangeEvent = ContractEvent<{ by: Address; value: bigint }>;
  export type ResetEvent = ContractEvent<{ by: Address }>;

  export interface CallMethodTable {
    getCounter: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getLastCaller: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getLastFiveChanges: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[bigint, bigint, bigint, bigint, bigint]>;
    };
    incrementCounter: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    resetCounter: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getCounter: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getLastCaller: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getLastFiveChanges: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    incrementCounter: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    resetCounter: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = { counter_usages?: Map<bigint, Entries> };
}

class Factory extends ContractFactory<
  CounterRalphInstance,
  CounterRalphTypes.Fields
> {
  encodeFields(fields: CounterRalphTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = { Change: 0, Reset: 1 };
  consts = {
    ErrorCodes: {
      MaxLimit: BigInt("0"),
      AlreadyNil: BigInt("1"),
      DataMalfunction: BigInt("2"),
      LackOfBal: BigInt("7"),
    },
  };

  at(address: string): CounterRalphInstance {
    return new CounterRalphInstance(address);
  }

  tests = {
    getCounter: async (
      params: Omit<
        TestContractParams<
          CounterRalphTypes.Fields,
          never,
          CounterRalphTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint, CounterRalphTypes.Maps>> => {
      return testMethod(this, "getCounter", params, getContractByCodeHash);
    },
    getLastCaller: async (
      params: Omit<
        TestContractParams<
          CounterRalphTypes.Fields,
          never,
          CounterRalphTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<Address, CounterRalphTypes.Maps>> => {
      return testMethod(this, "getLastCaller", params, getContractByCodeHash);
    },
    getLastFiveChanges: async (
      params: Omit<
        TestContractParams<
          CounterRalphTypes.Fields,
          never,
          CounterRalphTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<
        [bigint, bigint, bigint, bigint, bigint],
        CounterRalphTypes.Maps
      >
    > => {
      return testMethod(
        this,
        "getLastFiveChanges",
        params,
        getContractByCodeHash
      );
    },
    incrementCounter: async (
      params: Omit<
        TestContractParams<
          CounterRalphTypes.Fields,
          never,
          CounterRalphTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<null, CounterRalphTypes.Maps>> => {
      return testMethod(
        this,
        "incrementCounter",
        params,
        getContractByCodeHash
      );
    },
    resetCounter: async (
      params: Omit<
        TestContractParams<
          CounterRalphTypes.Fields,
          never,
          CounterRalphTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<null, CounterRalphTypes.Maps>> => {
      return testMethod(this, "resetCounter", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: CounterRalphTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: CounterRalphTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const CounterRalph = new Factory(
  Contract.fromJson(
    CounterRalphContractJson,
    "=16-2+82=2-2+ea=445-1+9=10+a0007e021d5468652063757272656e7420636f756e7465722076616c75652069732000=154+7a7e0214696e73657274206174206d617020706174683a2000=53-1+f=10+a0007e021d5468652063757272656e7420636f756e7465722076616c75652069732000=116",
    "2e40852d9b7d9ebd0c35117f81afcd695e07206c9fe72936c95d817030cbca1b",
    AllStructs
  )
);
registerContract(CounterRalph);

// Use this class to interact with the blockchain
export class CounterRalphInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    counter_usages: new RalphMap<bigint, Entries>(
      CounterRalph.contract,
      this.contractId,
      "counter_usages"
    ),
  };

  async fetchState(): Promise<CounterRalphTypes.State> {
    return fetchContractState(CounterRalph, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeChangeEvent(
    options: EventSubscribeOptions<CounterRalphTypes.ChangeEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      CounterRalph.contract,
      this,
      options,
      "Change",
      fromCount
    );
  }

  subscribeResetEvent(
    options: EventSubscribeOptions<CounterRalphTypes.ResetEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      CounterRalph.contract,
      this,
      options,
      "Reset",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      CounterRalphTypes.ChangeEvent | CounterRalphTypes.ResetEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      CounterRalph.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    getCounter: async (
      params?: CounterRalphTypes.CallMethodParams<"getCounter">
    ): Promise<CounterRalphTypes.CallMethodResult<"getCounter">> => {
      return callMethod(
        CounterRalph,
        this,
        "getCounter",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLastCaller: async (
      params?: CounterRalphTypes.CallMethodParams<"getLastCaller">
    ): Promise<CounterRalphTypes.CallMethodResult<"getLastCaller">> => {
      return callMethod(
        CounterRalph,
        this,
        "getLastCaller",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLastFiveChanges: async (
      params?: CounterRalphTypes.CallMethodParams<"getLastFiveChanges">
    ): Promise<CounterRalphTypes.CallMethodResult<"getLastFiveChanges">> => {
      return callMethod(
        CounterRalph,
        this,
        "getLastFiveChanges",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    incrementCounter: async (
      params?: CounterRalphTypes.CallMethodParams<"incrementCounter">
    ): Promise<CounterRalphTypes.CallMethodResult<"incrementCounter">> => {
      return callMethod(
        CounterRalph,
        this,
        "incrementCounter",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    resetCounter: async (
      params?: CounterRalphTypes.CallMethodParams<"resetCounter">
    ): Promise<CounterRalphTypes.CallMethodResult<"resetCounter">> => {
      return callMethod(
        CounterRalph,
        this,
        "resetCounter",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getCounter: async (
      params: CounterRalphTypes.SignExecuteMethodParams<"getCounter">
    ): Promise<CounterRalphTypes.SignExecuteMethodResult<"getCounter">> => {
      return signExecuteMethod(CounterRalph, this, "getCounter", params);
    },
    getLastCaller: async (
      params: CounterRalphTypes.SignExecuteMethodParams<"getLastCaller">
    ): Promise<CounterRalphTypes.SignExecuteMethodResult<"getLastCaller">> => {
      return signExecuteMethod(CounterRalph, this, "getLastCaller", params);
    },
    getLastFiveChanges: async (
      params: CounterRalphTypes.SignExecuteMethodParams<"getLastFiveChanges">
    ): Promise<
      CounterRalphTypes.SignExecuteMethodResult<"getLastFiveChanges">
    > => {
      return signExecuteMethod(
        CounterRalph,
        this,
        "getLastFiveChanges",
        params
      );
    },
    incrementCounter: async (
      params: CounterRalphTypes.SignExecuteMethodParams<"incrementCounter">
    ): Promise<
      CounterRalphTypes.SignExecuteMethodResult<"incrementCounter">
    > => {
      return signExecuteMethod(CounterRalph, this, "incrementCounter", params);
    },
    resetCounter: async (
      params: CounterRalphTypes.SignExecuteMethodParams<"resetCounter">
    ): Promise<CounterRalphTypes.SignExecuteMethodResult<"resetCounter">> => {
      return signExecuteMethod(CounterRalph, this, "resetCounter", params);
    },
  };

  async multicall<Calls extends CounterRalphTypes.MultiCallParams>(
    calls: Calls
  ): Promise<CounterRalphTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends CounterRalphTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<CounterRalphTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | CounterRalphTypes.MultiCallParams
      | CounterRalphTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      CounterRalph,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
