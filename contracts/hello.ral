struct Entries { mut val: U256, mut ts: U256, mut caller: Address }

Contract CounterRalph(mut counter: U256, mut count: U256) {


    mapping[U256, Entries] counter_usages


    event Change(by: Address, value: U256)
    event Reset(by: Address)

    enum ErrorCodes {
        MaxLimit = 0
        AlreadyNil = 1
        DataMalfunction = 2
        LackOfBal = 7
    }

    
    pub fn getCounter() -> U256 {
        return counter
    }

    pub fn getLastCaller() -> Address {
        if (count == 0){
            let null_add = nullContractAddress!()
            return null_add
        }
        else {
            let et = counter_usages[count]
            return et.caller
        }
    }

    pub fn getLastFiveChanges() -> [U256; 5]{
        let mut arr = [0, 0, 0, 0, 0]
        let mut i = count
        let mut j = 4
        while (i > 0 && j >= 0){
            let et = counter_usages[i]
            arr[j] = et.ts
            i = i - 1
            j = j - 1
        }
        return arr
    }

    
    @using(updateFields = true, checkExternalCaller = false, preapprovedAssets = true)
    pub fn incrementCounter() -> () {
        // Debug events can be helpful for error analysis
        emit Debug(`The current counter value is ${counter}`)


        assert!(counter <= 100, ErrorCodes.MaxLimit)
        
        counter = counter + 1

        assert!(!counter_usages.contains!(count + 1), ErrorCodes.DataMalfunction)
       let add = callerAddress!()
       let timestamp = blockTimeStamp!()
       let et = Entries { val : counter, ts: timestamp, caller: add }
       counter_usages.insert!(add, count + 1, et)

        count = count + 1
        // Emit the event defined earlier.
        emit Change(callerAddress!(), counter)
    }

     @using(updateFields = true, checkExternalCaller = false, preapprovedAssets = true, assetsInContract = true)
    pub fn resetCounter() -> () {
        // Debug events can be helpful for error analysis
        emit Debug(`The current counter value is ${counter}`)


        assert!(counter != 0, ErrorCodes.AlreadyNil)
	
        // Charge the resetting fee
        let add = callerAddress!()
        let b1 = tokenRemaining!(add, ALPH)
        transferTokenToSelf!(add, ALPH, 100000000000000000)
	let b2 = tokenRemaining!(add, ALPH)
	assert!(b1 == b2 + 100000000000000000, ErrorCodes.LackOfBal)
	
        counter = 0



        // Emit the event defined earlier.
        emit Reset(add)
    }
}
